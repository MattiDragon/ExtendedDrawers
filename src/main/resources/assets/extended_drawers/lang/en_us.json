{
  "block.extended_drawers.double_drawer": "Double Drawer",
  "block.extended_drawers.quad_drawer": "Quad Drawer",
  "block.extended_drawers.single_drawer": "Drawer",
  "block.extended_drawers.shadow_drawer": "Shadow Drawer",
  "block.extended_drawers.compacting_drawer": "Compacting Drawer",
  "block.extended_drawers.access_point": "Drawer Access Point",
  "block.extended_drawers.connector": "Drawer Connector",

  "item.extended_drawers.t1_upgrade": "Drawer Upgrade I",
  "item.extended_drawers.t2_upgrade": "Drawer Upgrade II",
  "item.extended_drawers.t3_upgrade": "Drawer Upgrade III",
  "item.extended_drawers.t4_upgrade": "Drawer Upgrade IV",
  "item.extended_drawers.creative_upgrade": "Creative Drawer Upgrade",
  "item.extended_drawers.upgrade_frame": "Upgrade Frame",
  "item.extended_drawers.lock": "Drawer Lock",
  "item.extended_drawers.limiter": "Capacity Limiter",
  "item.extended_drawers.dupe_wand": "Duplication Wand",

  "item.extended_drawers.limiter.clear": "Clear",
  "item.extended_drawers.limiter.limit": "Limit: %s",
  "item.extended_drawers.limiter.unset": "Unset",

  "tooltip.extended_drawers.shift_for_modifiers": "Press SHIFT for modifiers",
  "tooltip.extended_drawers.drawer_contents": "Contains:",
  "tooltip.extended_drawers.modifiers": "Modifiers: %s",
  "tooltip.extended_drawers.empty": "Empty",

  "itemGroup.extended_drawers.main": "Extended Drawers",

  "extended_drawer.drawer.upgrade_fail": "Can't change upgrade; too many items.",
  "extended_drawer.drawer.limiter_fail": "Can't change limiter; too many items.",

  "resourcepack.extended_drawers.alt": "ED: Alternative Textures",
  "resourcepack.extended_drawers.programmer_art": "ED: Programmer Art",

  "book.extended_drawers.guide.name": "Extending Drawers",
  "book.extended_drawers.guide.landing_text": "This guide will take you through all the steps of setting up great storage systems using drawers, as well as how each item and block in the mod work.",
  "book.extended_drawers.guide.subtitle": "Version ${version}",
  "book.extended_drawers.categories.blocks.name": "Blocks",
  "book.extended_drawers.categories.blocks.desc": "Extended Drawers offers a variety of blocks with different uses.",
  "book.extended_drawers.categories.modifiers.name": "Modifiers",
  "book.extended_drawers.categories.modifiers.desc": "Modifiers are items that can be added to drawers to change their behavior. Some work like toggles and can be used on multiple drawers while some have to be installed in the slot directly.",
  "book.extended_drawers.categories.networks.name": "Drawer Networking",
  "book.extended_drawers.categories.networks.desc": "This section goes over how drawer networks work and how to set up one. <br2>It also includes tips on how to integrate your network with other mods.",
  "book.extended_drawers.entries.access_points.name": "Access Points",
  "book.extended_drawers.entries.access_points.page.0": "<item>Access Points<!> allow inserting items to the whole <l:simple_networks>network<!>, automatically finding the right drawer, see <l:insertion_order>this<!> for ordering. <p>They also act as an interface for other mods to access the network, see <(l:mod_interoperability>this<!> for more info.",
  "book.extended_drawers.entries.capacity_limiters.name": "Capacity Limiters",
  "book.extended_drawers.entries.capacity_limiters.page.0": "<item>Capacity Limiters<!> are useful little items that allow you to limit the capacity of <l:lock>drawers<!>. They can be useful in contraptions and assembly lines where you want the limit the amount stored without advanced redstone. <p>Right click with one in hand to open it's configuration screen where you can set the limit.",
  "book.extended_drawers.entries.capacity_limiters.page.1.text": "Capacity limiters can be applied to drawers by shift clicking with a configured limiter. <p>Limiters can be copied by placing a configured limiter together with an unset one in the crafting grid.",
  "book.extended_drawers.entries.compacting_drawers.name": "Compacting Drawers",
  "book.extended_drawers.entries.compacting_drawers.page.0": "While slightly more expensive to craft <item>compacting drawers<!> offer a lot of convenience over regular <l:lock>drawers<!>. They automatically compress and decompress your items. They normally use crafting recipes, but some items might get special support.",
  "book.extended_drawers.entries.connectors.name": "Connectors",
  "book.extended_drawers.entries.connectors.page.0": "<item>Connectors<!> are simple blocks that allow you to connect different parts of your <l:simple_networks>network<!> together without wasting resources on <l:lock>drawers<!>. <p>They also produce less lag as they don't have to store any data.",
  "book.extended_drawers.entries.drawers.name": "Normal Drawers",
  "book.extended_drawers.entries.drawers.page.0": "<item>Drawers<!> are the core components of <l:simple_networks>networks<!> as they store items. They can be improved using <l:modifiers>modifiers<!>. <p>They come in different configurations: 1x1, 2x1 and 2x2.",
  "book.extended_drawers.entries.duping.name": "Duping Mode",
  "book.extended_drawers.entries.duping.page.0": "Duping mode can be toggled with a <item>dupe wand<!>. It makes it so that the <l:lock>drawer<!> starts duping items when you extract beyond what it stores. <p>This is useful for server admins that want to give out free items, or as an endgame unlock in a modpack.",
  "book.extended_drawers.entries.duping.page.1": "Like <l:lock>locks<!> the items aren't consumed and can be applied to access points. <p>Unlike other modifiers this one isn't obtainable in survival mode by default. However, modpacks often add recipes for the dupe wand.",
  "book.extended_drawers.entries.hiding.name": "Hidden Mode",
  "book.extended_drawers.entries.hiding.page.0": "Hidden mode can be toggled with a <item>black dye<!>. It makes it so that the <l:lock>drawer<!> doesn't show it's item'. <p>This is mostly useful when you have a big network of drawers and want to improve performance as rendering the item icons can be very expensive.",
  "book.extended_drawers.entries.hiding.page.1": "Like <l:lock>locks<!> the items aren't consumed and can be applied to access points. <p>Hiding can also applied to <l:shadow_drawers>shadow drawers<!>. This is mostly useful if you want to use one in a contraption.",
  "book.extended_drawers.entries.insertion_order.name": "Insertion Order",
  "book.extended_drawers.entries.insertion_order.page.0": "You may have noticed that when inserting items into a <l:networks>network<!> they prefer certain slots. This is because I have included a little bit of logic in networks so that they prioritizes certain slots to make your life easier. <p>Knowing these rules will be useful when designing storage systems so I have decided to write them down here.",
  "book.extended_drawers.entries.insertion_order.page.1.text": "First, the network will search for slots containing the item. <l:lock>Locked<!> ones are preferred over unlocked ones. If the item isn't found or if the slots are full the network will search through empty slots. Non-<l:voiding>voiding<!> drawers will be preferred to make sure you don't accidentally void items. <br2>For performance reasons sorting within these categories is arbitrary, but it shouldn't impact you that much.",
  "book.extended_drawers.entries.insertion_order.page.1.title": "Rules",
  "book.extended_drawers.entries.insertion_order.page.2": "<l>Example #1:<!><br>A network has one locked slot with a diamond in it and one non-locked slot with a diamond in it. When inserting a diamond, it will go into the locked slot if it can. <p><l>Example #2:<!><br>A network has one empty locked slot and one slot with an emerald in it. When inserting an emerald it will prefer the slot with the emerald despite the other slot being locked.",
  "book.extended_drawers.entries.insertion_order.page.3": "<l>Example #3:<!><br>A network has one voiding slot with a diamond in it and one non-voiding slot with a diamond in it. When inserting a diamond, it will go into the non-voiding slot if it can. <p><l>Example #4:<!><br>A network has one full locked voiding slot and a non-locked voiding slot, both diamonds in them. When inserting an diamond it will prefer the locked slot and get voided ignoring the non-locked slot with space.",
  "book.extended_drawers.entries.lock.name": "Locking",
  "book.extended_drawers.entries.lock.page.0": "Locking and unlocking is done using the <item>Lock<!> item. It makes it impossible to change the type of item the <l:lock>drawer<!> holds while allowing the count to change. <p>Useful when creating organised sorting systems or when <(l:mod_interoperability>linking to other mods<!>.",
  "book.extended_drawers.entries.lock.page.1.text": "Locks aren't consumed when used so you don't need to worry about making one for every drawer. It can also be used on access points to toggle the locks of the entire network.",
  "book.extended_drawers.entries.mod_interoperability.name": "Mod Interoperability",
  "book.extended_drawers.entries.mod_interoperability.page.0": "<l:simple_networks>Networks<!> can be interacted with by any mod using the <thing>fabric transfer api<!> as well as hoppers. <p>Individual <l:lock>drawers<!> support inserting and extracting from their slots. <p><l:access_points>Access points<!> and <l:shadow_drawers>shadow drawers<!> provide access to the whole network with additional filtering if using a shadow drawer.",
  "book.extended_drawers.entries.mod_interoperability.page.1": "These systems allow you to build complex contraptions that can do all kinds of things. <br2>Here are some examples:<br><li>You can hook up a ME system from applied energetics to an access point for easy gui access. <li>You can use long connector chains and shadow drawers to transfer items long distances instantly and without chunk loading in the middle.",
  "book.extended_drawers.entries.shadow_drawers.name": "Shadow Drawers",
  "book.extended_drawers.entries.shadow_drawers.page.0": "<item>Shadow Drawers<!> are similar to <l:access_points>access points<!> but only work with one item. They also allow players to extract items and show the count. <br2>They behave like they would be <l:lock>locked<!>, but their item can be cleared by shift-clicking.",
  "book.extended_drawers.entries.simple_networks.name": "Simple Networks",
  "book.extended_drawers.entries.simple_networks.page.0": "Just by placing some <l:lock>drawers<!> next to each other you have created as simple network. However, that network doesn't do anything yet. <br2>We'll start simple and add an <l:access_points>access point<!> to the network. It allows you to insert items into the drawers they belong in without walking over to them.",
  "book.extended_drawers.entries.upgrades.name": "Drawer Upgrades",
  "book.extended_drawers.entries.upgrades.page.0": "<item>Upgrades<!> are applied using different upgrade items. They increase the capacity of a <l:lock>drawer<!> slot. <p>To install one, simply click on a slot with the <item>upgrade<!> in hand while sneaking. <p>They are most useful when storing lots of items.",
  "book.extended_drawers.entries.upgrades.page.1.text": "The <item>Upgrade Frame<!> is the base item of all upgrades. It doesn't do anything by itself.",
  "book.extended_drawers.entries.upgrades.page.2.text": "The <item>Drawer Upgrade I<!> is the first tier of the upgrade. It doubles the capacity of the drawer.",
  "book.extended_drawers.entries.upgrades.page.3.text": "The <item>Drawer Upgrade II<!> is the second tier of the upgrade. It multiplies the capacity of the drawer by 4.",
  "book.extended_drawers.entries.upgrades.page.4.text": "The <item>Drawer Upgrade III<!> is the third tier of the upgrade. It multiplies the capacity of the drawer by 8.",
  "book.extended_drawers.entries.upgrades.page.5.text": "The <item>Drawer Upgrade IV<!> is the fourth tier of the upgrade. It multiplies the capacity of the drawer by 16.",
  "book.extended_drawers.entries.voiding.name": "Voiding Mode",
  "book.extended_drawers.entries.voiding.page.0": "Voiding mode can be toggled with a <item>lava bucket<!>. It makes it so that the <l:lock>drawer<!> deletes excess items. <p>This is mostly useful when you have bulk storage for a very common item and don't want it to clog the system when it fills up.",
  "book.extended_drawers.entries.voiding.page.1": "Like <l:lock>locks<!> they aren't consumed and can be applied to access points. <p>Be careful as it can easily void important items if used improperly. Also make sure to aim well, or you might end up placing the lava instead.",

  "command.extended_drawers.reload.fail": "Failed to reload config. Check logs",
  "command.extended_drawers.reload.success": "Successfully reloaded config!",

  "config.extended_drawers": "Extended Drawers",
  "config.extended_drawers.storage": "Storage",
  "config.extended_drawers.storage.drawerCapacity": "Drawer capacity",
  "config.extended_drawers.storage.drawerCapacity.description": "The base capacity of drawers. This is then modified by upgrades and other options to get the final capacity.",
  "config.extended_drawers.storage.compactingCapacity": "Compacting drawer capacity",
  "config.extended_drawers.storage.compactingCapacity.description": "The base capacity of compacting drawers, measured in the most compressed version. Upgrades and other options modify this.",
  "config.extended_drawers.storage.stackSizeAffectsCapacity": "Stack size affects capacity",
  "config.extended_drawers.storage.stackSizeAffectsCapacity.description": "If enabled, the capacity of drawers will decrease based on the stack size of the contained items to always accept the same amount of stacks.\n\nCompacting drawers check this on the smallest item.",
  "config.extended_drawers.storage.slotCountAffectsCapacity": "Slot count affects capacity",
  "config.extended_drawers.storage.slotCountAffectsCapacity.description": "If enabled, the capacity of each slot in a normal drawer is divided by the amount of slots. When enabled all normal drawers store the same amount of items.",
  "config.extended_drawers.storage.upgradeMultipliers": "Upgrade multipliers",
  "config.extended_drawers.storage.upgradeMultipliers.description": "These options control multipliers that the upgrades apply to the capacity of drawers.",
  "config.extended_drawers.storage.upgradeMultipliers.n.description": "The multiplier that the tier %s upgrade applies to the capacity of drawers.",
  "config.extended_drawers.storage.upgradeMultipliers.1": "Upgrade I",
  "config.extended_drawers.storage.upgradeMultipliers.2": "Upgrade II",
  "config.extended_drawers.storage.upgradeMultipliers.3": "Upgrade III",
  "config.extended_drawers.storage.upgradeMultipliers.4": "Upgrade IV",
  "config.extended_drawers.misc": "Miscellaneous",
  "config.extended_drawers.misc.insertAllTime": "Insert all window",
  "config.extended_drawers.misc.insertAllTime.description": "The max time between the clicks of a double click for inserting all items. Measured in ticks.",
  "config.extended_drawers.misc.frontBreakingBehaviour": "Front breaking behavior",
  "config.extended_drawers.misc.frontBreakingBehaviour.description": "This option controls how breaking drawer blocks works on the front face in creative mode.\n",
  "config.extended_drawers.misc.sideBreakingBehaviour": "Side breaking behavior",
  "config.extended_drawers.misc.sideBreakingBehaviour.description": "This option controls how breaking drawer blocks works on the side, back, bottom and top faces in creative mode.\n",
  "config.extended_drawers.misc.cachingMode": "Caching mode",
  "config.extended_drawers.misc.cachingMode.description": "Controls the way in which drawer networks are cached (stored for later use). Different options have different performance characteristics.\n\n",
  "config.extended_drawers.misc.blockUpgradeRemovalsWithOverflow": "Prevent overflow",
  "config.extended_drawers.misc.blockUpgradeRemovalsWithOverflow.description": "If enabled, you can't remove upgrades if the slot would overflow after removal. If disabled, the drawer will drop the overflowing items on the ground.",
  "config.extended_drawers.misc.allowRecursion": "Allow recursion",
  "config.extended_drawers.misc.allowRecursion.description": "Allows you to place drawers insider shulker boxes and other drawers.\n\n",
  "config.extended_drawers.misc.allowRecursion.warning": "Warning: Deeply nested storage can lead to chunk and player data corruption.",
  "config.extended_drawers.misc.drawersDropContentsOnBreak": "Drop drawer contents",
  "config.extended_drawers.misc.drawersDropContentsOnBreak.description": "If enabled, drawers will drop their contents instead of retaining them when broken.\n\n",
  "config.extended_drawers.misc.drawersDropContentsOnBreak.warning": "Warning: This can lead to large amounts of dropped items, causing significant lag.",
  "config.extended_drawers.misc.dropDrawersInCreative": "Drop drawers in creative",
  "config.extended_drawers.misc.dropDrawersInCreative.description": "If enabled, drawers will drop as items even when broken in creative mode.",
  "config.extended_drawers.client": "Client",
  "config.extended_drawers.client.itemRenderDistance": "Item render distance",
  "config.extended_drawers.client.itemRenderDistance.description": "The render distance of the item display on drawers. Measured in blocks.",
  "config.extended_drawers.client.iconRenderDistance": "Icon render distance",
  "config.extended_drawers.client.iconRenderDistance.description": "The render distance of the lock, upgrades and other similar icons on drawers. Measured in blocks.",
  "config.extended_drawers.client.textRenderDistance": "Text render distance",
  "config.extended_drawers.client.textRenderDistance.description": "The render distance of the items counter on the drawers. Measured in blocks.",
  "config.extended_drawers.client.displayEmptyCount": "Display empty count",
  "config.extended_drawers.client.displayEmptyCount.description": "Whether to display the amount of items on empty drawers.",
  "config.extended_drawers.client.layout": "Layout",
  "config.extended_drawers.client.smallItemScale": "Small item scale",
  "config.extended_drawers.client.smallItemScale.description": "The scale at which to render the items on drawers for small slots",
  "config.extended_drawers.client.largeItemScale": "Large item scale",
  "config.extended_drawers.client.largeItemScale.description": "The scale at which to render the items on drawers for large slots",
  "config.extended_drawers.client.smallTextScale": "Small text scale",
  "config.extended_drawers.client.smallTextScale.description": "The scale at which to render the text on drawers for small slots",
  "config.extended_drawers.client.largeTextScale": "Large text scale",
  "config.extended_drawers.client.largeTextScale.description": "The scale at which to render the text on drawers for large slots",
  "config.extended_drawers.client.textOffset": "Text offset",
  "config.extended_drawers.client.textOffset.description": "Offset from the bottom of the slot to move the text by on drawers",
  "config.extended_drawers.client.icons": "Icons",
  "config.extended_drawers.client.lockedIcon": "Locked mode icon",
  "config.extended_drawers.client.lockedIcon.description": "The id of icon to be displayed on locked drawers. This texture must be available on the block texture atlas (all block and item textures reside there) to work properly.\n\nThe actual behaviour is controlled by the 'extended_drawers:toggle/lock' tag.",
  "config.extended_drawers.client.voidingIcon": "Voiding mode icon",
  "config.extended_drawers.client.voidingIcon.description": "The id of icon to be displayed on voiding drawers. This texture must be available on the block texture atlas (all block and item textures reside there) to work properly.\n\nThe actual behaviour is controlled by the 'extended_drawers:toggle/voiding' tag.",
  "config.extended_drawers.client.hiddenIcon": "Hidden mode icon",
  "config.extended_drawers.client.hiddenIcon.description": "The id of icon to be displayed on hidden drawers. This texture must be available on the block texture atlas (all block and item textures reside there) to work properly.\n\nThe actual behaviour is controlled by the 'extended_drawers:toggle/hidden' tag.",
  "config.extended_drawers.client.dupingIcon": "Duping mode icon",
  "config.extended_drawers.client.dupingIcon.description": "The id of icon to be displayed on duping drawers. This texture must be available on the block texture atlas (all block and item textures reside there) to work properly.\n\nThe actual behaviour is controlled by the 'extended_drawers:toggle/duping' tag.",

  "config.extended_drawers.creativeBreakingBehaviour.break": "Break",
  "config.extended_drawers.creativeBreakingBehaviour.break.description": "Break: Breaking is instant as normal.",
  "config.extended_drawers.creativeBreakingBehaviour.mine": "Mine",
  "config.extended_drawers.creativeBreakingBehaviour.mine.description": "Mine: Breaking works as in survival.",
  "config.extended_drawers.creativeBreakingBehaviour.no_break": "No break",
  "config.extended_drawers.creativeBreakingBehaviour.no_break.description": "No break: Block can't be broken, like bedrock in survival.",

  "config.extended_drawers.cachingMode.none": "None",
  "config.extended_drawers.cachingMode.none.description": "None: No caching is preformed. This option generally results in poor performance, especially with large networks that are often interacted with, but is almost guaranteed to be bug free. Only use this option if you are experiencing issues with the other options.",
  "config.extended_drawers.cachingMode.simple": "Simple",
  "config.extended_drawers.cachingMode.simple.description": "Simple: Networks are cached, but the cache is rebuilt entirely each time the physical structure of the network changes. This option performs almost equally to the 'smart' option unless there's a lot of structural changes. This option is more likely to be stable and generally recommended. This is the default option.",
  "config.extended_drawers.cachingMode.smart": "Smart",
  "config.extended_drawers.cachingMode.smart.description": "Smart: Networks are cached, and the cache is updated incrementally as the physical structure of the network changes. This option performs better than the 'simple' option when there's a lot of structural changes, but it's more prone to bugs. Use this option if you're experiencing performance issues with the 'simple' option and are willing to risk buggy behaviour."
}